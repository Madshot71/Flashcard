unit _home;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, pngimage, jpeg, ExtCtrls, Buttons, Generics.Collections;

type
  // TSlot represents a single visual card (a GroupBox and its inner controls)
  TSlot = class(TObject)
  public
    Name : string;
    Button : TButton;

    // Constructor to map components
    constructor Create(name : string ; button : TButton);
  end;

type
  THome = class(TForm)
    Background: TImage;
    TransperantBackground: TImage;
    Label2: TLabel;

    CreateGroup: TButton;
    ScrollBox1: TScrollBox;
    btnPrefab: TButton;
    btnRefresh: TButton;
    Button1: TButton;
    Date_Time: TLabel; // Button to open the Create Group form


    // Event Handlers
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure CreateGroupClick(Sender: TObject);
    procedure Refresh();
    procedure btnRefreshClick(Sender: TObject);
    procedure FormActivate(Sender: TObject);
    procedure btnPrefabClick(Sender: TObject);
    procedure btnCreateCard(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure Data_TimeClick(Sender: TObject);
  private
    { Private declarations }
    function CreateButton(name : string): TButton;
  public
    { Public declarations }
  end;


var
  Home: THome;
  mainOn: bool;
  // TObjectList to manage the TSlot objects (one for each GroupBox)
  Slots: TObjectList<TSlot>;

  SelectedSubject: string; // The subject name for the currently active/selected group

// --- TSlot Management Helper Functions ---

implementation

{$R *.dfm}

uses _login, _card, _addCard, FlashCardManager, _createGroup;
// Assuming FlashCardManager defines manager and the subject types
// Assuming _createGroup defines AddGroup form

// --- TSlot Implementation ---

constructor TSlot.Create(name : string; button :Tbutton);
begin
  inherited Create;
  // Initialize and assign the visual components
  self.name := name;
  self.Button := button;
end;

// --- THome Form Methods ---

procedure THome.CreateGroupClick(Sender: TObject);
begin
  // Ensure the _createGroup form is assigned/created before showing it
  if Assigned(AddGroup) then
  begin
    AddGroup.ShowModal;
    // Refresh the subject list when the Create Group form closes
    Refresh;
  end;
end;


procedure THome.btnRefreshClick(Sender: TObject);
begin
  Refresh;
end;

function THome.CreateButton(name : string) : TButton;
var
 tmpButton : TButton;
begin
  tmpButton := TButton.Create(self);
  tmpButton.Parent := ScrollBox1;
  tmpButton.Align := btnPrefab.Align;
  tmpButton.Width := btnPrefab.Width;
  tmpButton.Height := btnPrefab.Height;

  tmpButton.Font := btnPrefab.Font;
  tmpButton.OnClick := btnPrefab.OnClick;
  tmpButton.Caption := name;
  result := tmpButton;
end;

procedure THome.Refresh();
var
  name : string;
  tmpSlot : TSlot;
  i : integer;
begin
  for tmpSlot in Slots do
    if tmpSlot.Button = nil then
    begin
      continue;
    end else
    begin
      tmpSlot.Button.Destroy;
    end;

  slots.clear;

  for I := 0 to manager.Subject.Count - 1 do
  begin
    name := manager.Subject[i].subjectName;
    tmpSlot := TSlot.Create(name , CreateButton(name));
    Slots.Add(tmpSlot);
  end;
end;

procedure THome.btnPrefabClick(Sender: TObject);
var
  clicked : Tbutton;
begin
  clicked := Sender as TButton;
  groupname := clicked.Caption;
  card.Show;
  Hide;
end;

procedure THome.btnCreateCard(Sender: TObject);

begin
    // Show the Add Card form for the selected subject
    AddCard.ShowModal;
    // Refresh the subject list to update the card counts after closing the AddCard form
    Refresh;
end;

procedure THome.FormActivate(Sender: TObject);
begin
  manager.Load;
 if slots = nil then
 begin
   slots := TObjectList<TSlot>.Create;
 end;
 Refresh;
end;

procedure THome.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  // Free the TSlot list when the form closes
  FreeAndNil(Slots);
  Application.Terminate;
end;

procedure THome.FormDestroy(Sender: TObject);
begin
  manager.Save;
end;

end.
