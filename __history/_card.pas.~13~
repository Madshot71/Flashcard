    unit _card;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, ExtCtrls, pngimage, StdCtrls, jpeg, Buttons, ComCtrls, FlashCardManager,
  Generics.Collections;

type
  TCard = class(TForm)
    background: TImage;
    transperantBackground: TImage;
    TopBar: TImage;
    btnExit: TButton;
    Panel1: TPanel;
    Definition: TRichEdit;
    btnNext: TButton;
    lbWord: TLabel;
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure btnExitClick(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure btnNextClick(Sender: TObject);
    procedure SetUpTest();
    procedure ShowAnswer();
    procedure FormDestroy(Sender: TObject); // Added to free global Test list
  private
    { Private declarations }
  public
    { Public declarations }
  end;

  TTest = class
  public
    done: boolean; // Not used in this version but useful for tracking score
    word: string;
    definition: string;
    constructor Create(name, definition: string);
  end;

procedure CreateTest();
function CreateEachTest(group: TFlashCardGroup): TObjectList<TTest>;
function GetRandomTest(): TTest; // Moved function declaration up

var
  Card: TCard;
  cardshown: boolean; // Flag to check if the answer is currently showing
  Test: TObjectList<TTest>; // CRITICAL: This needs to be created on startup
  index: integer; // Used to track how many tests were used (not necessarily left)
  currentTest: TTest;
  groupName: string; // CRITICAL: This must be set by the caller (_home)

implementation

{$R *.dfm}

uses _home; // Assuming Home form is defined here

{ TTest }

constructor TTest.Create(name, definition: string);
begin
  inherited Create;
  self.word := name;
  self.definition := definition;
  self.done := False;
end;

{ Test List Management }

// CRITICAL FIX: The global Test list MUST be initialized (created) before use.
// It's best to create it once on application startup or in FormCreate/FormShow.

procedure CreateTest();
var
  i: Integer;
begin
  // Ensure the list is created if it hasn't been yet.
  if not Assigned(Test) then
    // Use Create(True) so the list frees the TTest objects when it's destroyed or cleared.
    Test := TObjectList<TTest>.Create(True);

  Test.Clear;

  // NOTE: groupName MUST be set by the calling form (THome)
  if groupName = '' then Exit;

  // Find the required subject group
  for I := 0 to manager.Subject.Count - 1 do
  begin
    if manager.Subject[i].subjectName = groupName then
    begin
      // Replace the global Test list with the newly created list of tests
      Test.Free;
      Test := CreateEachTest(manager.Subject[i]);
      Exit;
    end;
  end;
end;

// CRITICAL FIX: The local list 'tmp' must be created (instantiated).
function CreateEachTest(group: TFlashCardGroup): TObjectList<TTest>;
var
  tmp: TObjectList<TTest>;
  i: integer;
  CardItem: TFlashCard;
begin
  // Create a new list instance, set to free the TTest objects
  tmp := TObjectList<TTest>.Create(True);

  // Convert TFlashCard objects to TTest objects
  for CardItem in group.Cards do
  begin
    // Note: FlashCardManager defines TFlashCard as having Definition and Explanation
    // You are mapping these fields to TTest's 'word' and 'definition' respectively.
    tmp.Add(TTest.Create(CardItem.Definition, CardItem.Explanation));
  end;
  Result := tmp;
end;

// CRITICAL FIX: Logic to pick a random test from the list.
function GetRandomTest(): TTest;
var
  RandomIndex: Integer;
begin
  if (not Assigned(Test)) or (Test.Count = 0) then
  begin
    Result := nil;
    Exit;
  end;

  // Ensure Randomize has been called at application startup
  Randomize;

  // Random(N) returns 0 to N-1
  RandomIndex := Random(Test.Count);

  Result := Test[RandomIndex];
end;

{ TCard Form Methods }

procedure TCard.FormDestroy(Sender: TObject);
begin
  // Free the global Test list when the form is destroyed
  FreeAndNil(Test);
end;

procedure TCard.FormShow(Sender: TObject);
begin
  // CRITICAL: Get the group name from the home form's global variable

  if groupName = '' then
  begin
    ShowMessage('Error: No subject selected.');
    btnExitClick(nil); // Go back home
    Exit;
  end;

  CreateTest();

  index := 0;
  cardshown := False;
  Definition.Lines.Clear;
  btnNext.Caption := 'Show Answer';

  // Start the first test
  currentTest := GetRandomTest;
  if Assigned(currentTest) then
    SetUpTest
  else
    ShowMessage('Error: No cards found in this subject.');
end;

procedure TCard.SetUpTest();
begin
  // Setup for QUESTION
  lbWord.Caption := currentTest.word;
  Definition.Lines.Clear; // Clear the answer display
  cardshown := False;
  btnNext.Caption := 'Show Answer';
end;

procedure TCard.ShowAnswer();
begin
  // Setup for ANSWER
  Definition.Lines.Text := currentTest.definition; // Show the full answer/explanation
  cardshown := True;

  // Mark test as done and update button caption
  currentTest.done := True;
  btnNext.Caption := 'Next Card';

  // Increment index (optional, but tracks progress)
  Inc(index);
end;

procedure TCard.btnNextClick(Sender: TObject);
begin
  // 1. If the answer is showing, move to the next card
  if cardshown then
  begin
    // Check if the test is finished
    if index = Test.Count then
    begin
      ShowMessage('Test finished! Returning home.');
      btnExitClick(Sender);
      Exit;
    end;

    // Get the next random test
    currentTest := GetRandomTest;

    if Assigned(currentTest) then
      SetUpTest // Show next question
    else
    begin
      ShowMessage('Error: Could not retrieve next card.');
      btnExitClick(Sender);
    end;
  end
  // 2. If the question is showing, show the answer
  else
  begin
    ShowAnswer;
  end;
end;

procedure TCard.btnExitClick(Sender: TObject);
begin
  // Clear the test data when exiting
  FreeAndNil(Test);

  Card.Hide;
  Home.Show;
end;

procedure TCard.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  // CRITICAL FIX: Use the fully qualified name "Forms.caTerminate"
  Application.Terminate;
end;

end.
